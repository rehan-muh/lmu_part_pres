clear()

### Read in sequence data
path = "/Users/loaner/Desktop/RevBayes/data/"

### Read in sequence data
data <- readDiscreteCharacterData(path + "ringephonologicalcharacters.nex")


#Number of taxa
n_taxa <- data.ntaxa()

# Number of branches in a rooted tree
# n_branches <- 2 * n_taxa - 2

# Number of branches in an unrooted tree
n_branches <- 2 * n_taxa - 3

#Taxa
taxa <- data.taxa()

#Store moves and monitors in helpers
moves    = VectorMoves()
monitors = VectorMonitors()


######################
## Transition Model ##
######################

kappa ~ dnExp(1)
moves.append( mvScale(kappa, weight=5.0) )

pi ~ dnDirichlet(v(1,1,1,1))
moves.append( mvBetaSimplex(pi, weight=5.0) )

er ~ dnDirichlet(v(1,1,1,1,1,1))
moves.append( mvBetaSimplex(er, weight=5.0) )

Q_JC  <- fnJC(4)
Q_K80 := fnK80(kappa)
Q_F81 := fnF81(pi)
Q_HKY := fnHKY(kappa, pi)
Q_GTR := fnGTR(er, pi)

Q_vec := v(Q_JC, Q_K80, Q_F81, Q_HKY, Q_GTR)

model_indicator ~ dnCategorical(simplex(1,1,1,1,1))
moves.append( mvRandomGeometricWalk(model_indicator, weight=10.0, tune=FALSE))

Q := Q_vec[model_indicator]


alpha ~ dnReversibleJumpMixture(1E8, dnUniform(0,1E8), 0.5)
alpha.setValue(1.0)
moves.append( mvRJSwitch(alpha, weight=10.0) )
moves.append( mvScale(alpha, weight=10.0) )

alpha_indicator := ifelse(alpha == 1E8, 0, 1)

site_rates := fnDiscretizeGamma(alpha, alpha, 4)


##############
# Tree model #
##############

anatolian = clade("HI", "LY", "LU")

topology ~ dnUniformTopology(taxa, outgroup=anatolian)

# These are moves that change the tree topology

moves.append( mvNNI(topology, weight=n_taxa/2.0) )
moves.append( mvSPR(topology, weight=n_taxa/10.0) )

# Branch length prior

for (i in 1:n_branches) {
    bl[i] ~ dnExponential(10.0)
    moves.append( mvScale(bl[i]) )
}

TL := sum(bl)

psi := treeAssembly(topology, bl)

###################
# PhyloCTMC Model #
###################


seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteRates=site_rates, type="Standard")

seq.clamp(data)


############
# Analysis #
############

#You can use any node as the argument of model()
mymodel = model(psi)

generations = 10


monitors.append( mnScreen(TL, printgen=generations) )
#This monitors the trees and puts them in a file
monitors.append( mnFile(psi, filename="output/ringe_rjmcmc_phon.trees", printgen=generations) )
#Model monitor
monitors.append( mnModel(filename="output/ringe_rjmcmc_phon.log", printgen=generations) )

mymcmc = mcmc(mymodel, moves, monitors)


mymcmc.burnin(generations=100, tuningInterval=10)
mymcmc.run(generations=2000)

#This gives you a summary of the MCMC chains
mymcmc.operatorSummary()


###################
# Post processing #
###################


treetrace = readTreeTrace("output/ringe_rjmcmc_phon.trees", outgroup=anatolian,  treetype="non-clock")

map_tree = mapTree(treetrace, "output/ringe_rjmcmc_phon_map.tree")

mcc_tree = mccTree(treetrace, "output/ringe_rjmcmc_phon_mcc.tree")
